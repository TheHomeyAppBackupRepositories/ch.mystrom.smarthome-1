'use strict';

// TODO: Test appWrapper !!

const SimpleClass = require('../myLayer/SimpleClass');

module.exports = class HomeyApp extends SimpleClass {

  #homeyApp = null;
  #connected = false;
  #mandatory = null;

  constructor(owner, mandatory = true, appID, appDeley = 1) {
    super(owner);
    this.appID = appID;
    this.appDeley = appDeley;
    this.#mandatory = mandatory;

    this.#homeyApp = this.homey.api.getApiApp(this.appID);
    this.#homeyApp
      .on('install', this.onInstall.bind(this))
      .on('uninstall', this.onUninstall.bind(this))
      .on('realtime', this.onRealtime.bind(this));
  }

  // HomeyApp API events

  onInstall(result) {
    this.logDebug(`onInstall() appDelay: ${this.appDeley} Sec.`);

    this.homey.setTimeout(() => {
      this.emit('connect');
      this.notifyInfo(`${this.constructor.name} installed`);
    }, this.appDeley * 1000);
  }

  onUninstall() {
    this.logDebug('onUninstall()');
    if (this.#mandatory) {
      this.mandatoryError();
    }
    this.emit('disconnect');
  }

  onRealtime(event, data) {
    // this.logDebug(`onRealtime() > event: ${event} data: ${Array.isArray(data) ? JSON.stringify(data) : data}`);
    this.emit('message', event, data);
  }

  // HomeyApp API

  isConnected() {
    return this.#connected;
  }

  async connect() {
    this.logDebug('connect()');

    if (this.isConnected()) {
      this.logDebug(`connect() > ${this.constructor.name} is already connected`);
      return Promise.resolve(true);
    }

    return this.#homeyApp.getInstalled()
      .then(() => {
        this.#connected = true;
      })
      .catch((error) => {
        if (this.#mandatory) {
          this.mandatoryError();
        }
        throw Error(`${this.constructor.name} not installed`);
      });
  }

  disconnect() {
    this.logDebug('disconnect()');

    if (!this.isConnected()) {
      this.logDebug('disconnect() > HomeyApp is already disconnected');
      return Promise.resolve(true);
    }

    this.#connected = false;
    // Error: TypeError: this[#homeyApp].unregisterApi is not a function
    // this.#homeyApp.unregisterApi();

    return Promise.resolve(true);
  }

  // Homey API

  get(uri) {
    if (!this.isConnected()) {
      return Promise.resolve(true);
    }

    this.logDebug(`get() > uri: "${uri}"`);
    return this.#homeyApp.get(uri)
      .catch((error) => {
        this.logError(`get() > ${error}`);
        throw Error(error);
      });
  }

  post(uri, body) {
    if (!this.isConnected()) {
      return Promise.resolve(true);
    }

    this.logDebug(`post() > uri: "${uri}", body: ${JSON.stringify(body)}`);
    return this.#homeyApp.post(uri, body)
      .catch((error) => {
        this.logError(`post() > ${error}`);
        throw Error(error);
      });
  }

  put(uri, body) {
    if (!this.isConnected()) {
      return Promise.resolve(true);
    }

    this.logDebug(`put() > uri: "${uri}", body: ${JSON.stringify(body)}`);
    return this.#homeyApp.put(uri, body)
      .catch((error) => {
        this.logError(`put() > ${error}`);
        throw Error(error);
      });
  }

  delete(uri) {
    if (!this.isConnected()) {
      return Promise.resolve(true);
    }

    this.logDebug(`delete() > uri: "${uri}"}`);
    return this.#homeyApp.post(uri)
      .catch((error) => {
        this.logError(`delete() > ${error}`);
        throw Error(error);
      });
  }

  mandatoryError() {
    this.notifyError(`The ${this.constructor.name} is mandatory. Please (re)install it ... `);
  }

};
