'use strict';

const Homey = require('homey');

const { SimpleLogMixin } = require('homey-simplelog-api');

module.exports = class MyDevice extends SimpleLogMixin(Homey.Device) {

  get data() {
    return this.getData();
  }

  async onInit(options = {}) {
    this.logDebug('onInit()');

    // Homey events
    this.homey
      .on('unload', this.onUnload.bind(this));

    this.setUnavailable(this.homey.__('connecting'));

    this.ready()
      .then(() => this.initDevice())
      .then(() => super.setAvailable())
      .then(() => this.logNotice('Device ready'))
      .catch((err) => {
        this.setUnavailable(err.message);
        this.logError(`Device not ready > ${err.message}`);
      });
  }

  initDevice() {
    this.logDebug('initDevice()');
    return Promise.resolve();
  }

  setAvailable() {
    return super.setAvailable()
      .catch((err) => this.logError(`setAvailable() > ${err}`));
  }

  // Homey Lifecycle

  onAdded() {
    this.logDebug('onAdded()');
    this.logNotice('Device added');
  }

  onDeleted() {
    this.logDebug('onDeleted()');
    this.logNotice('Device deleted');
  }

  onRenamed(name) {
    this.logDebug('onRenamed()');
    this.logNotice(`Device renamed to ${name}`);
  }

  onUnload() {
    this.logDebug('onUnload()');
    this.logNotice('Device unloaded');
  }

  // Data handling

  async setCapabilityValue(capabilityId, value) {
    const currentValue = this.getCapabilityValue(capabilityId);
    if (currentValue === value) return Promise.resolve(currentValue);

    // eslint-disable-next-line no-return-await
    return await super.setCapabilityValue(capabilityId, value)
      .then(() => {
        this.logDebug(`setCapabilityValue() '${capabilityId}' - ${currentValue} > ${value}`);
        return value;
      })
      .catch((err) => this.logError(`setCapabilityValue() '${capabilityId}' > ${err}`));
  }

  deviceChanged(fnc) {
    this.homey.setTimeout(() => {
      this.logNotice(fnc());
    }, 1500);
  }

  // MyHomey Notification

  showWarning(message) {
    return this.setWarning(message)
      .then(() => this.homey.setTimeout(() => this.unsetWarning(), 3000))
      .catch((err) => this.logError(`showWarning() > ${err}`));
  }

  notifyInfo(msg) {
    this.homey.setTimeout(() => {
      this.homey.app.notifyInfo((typeof msg !== 'function') ? msg : msg());
    }, 1000);
  }

  notifyNotice(msg) {
    this.homey.app.notifyNotice((typeof msg !== 'function') ? msg : msg());
  }

  notifyError(msg) {
    this.homey.app.notifyError((typeof msg !== 'function') ? msg : msg());
  }

};
