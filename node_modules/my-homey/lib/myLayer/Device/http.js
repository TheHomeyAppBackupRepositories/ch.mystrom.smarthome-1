'use strict';

const MyDevice = require('./index');

const HttpAPI = require('../../com/httpAPI');

module.exports = class MyHttpDevice extends MyDevice {

  #httpAPI = null;

  async onInit(options = {}) {
    this.#httpAPI = new HttpAPI(this, this.getBaseURL());
    super.onInit(options);
  }

  initDevice() {
    return super.initDevice()
      .then(() => this.getDeviceValues());
  }

  // Homey: discovery

  onDiscoveryResult(discoveryResult) {
    // this.logDebug(`onDiscoveryResult() > ${JSON.stringify(discoveryResult)}`);
    return discoveryResult.mac === this.data.mac;
  }

  onDiscoveryAvailable(discoveryResult) {
    this.logDebug('onDiscoveryAvailable()');

    return this.setAvailable();
  }

  onDiscoveryAddressChanged(discoveryResult) {
    this.logInfo(`Device address changed to: ${discoveryResult.address}`);

    this.logDebug('onDiscoveryAddressChanged()');

    return this.setStoreValue('address', discoveryResult.address)
      .then(() => this.setSettings({ address: discoveryResult.address }))
      .then(() => this.#httpAPI.setBaseURL(this.getBaseURL()))
      .catch((err) => this.logError(`onDiscoveryAddressChanged() > ${err}`));
  }

  onDiscoveryLastSeenChanged(discoveryResult) {
    this.logDebug('onDiscoveryLastSeenChanged()');

    // TODO: >> localDateTimeFormater
    return this.setSettings({ lastSeen: this.driver.localDateTimeFormater().format(new Date(discoveryResult.lastSeen)) })
      .catch((err) => this.logError(`onDiscoveryLastSeenChanged() > ${err}`));
  }

  // MyHttpDevice

  getBaseURL() {
    throw Error('Subclass responsibility');
  }

  // Data handling

  getDeviceValues(url = '**unknown**') {
    this.logDebug(`getDeviceValues() - '${url}'`);
    return this.getDeviceData(url);
  }

  getDeviceData(url) {
    return this.#httpAPI.get(url)
      .then((json) => {
        this.logDebug(`getDeviceData() - '${url}' > ${JSON.stringify(json)}`);
        this.setAvailable();
        return json;
      })
      .catch((err) => {
        this.logError(`getDeviceData() - '${url}' > ${err}`);
        this.#handelHttpError(err);
        throw Error('Get device-data failed');
      });
  }

  setDeviceData(url, value) {
    return this.#httpAPI.post(url, value)
      .then((json) => {
        this.logDebug(`setDeviceData() - '${url}' > ${JSON.stringify(value) || value || 'null'}`);
        this.setAvailable();
        return json;
      })
      .catch((err) => {
        this.logError(`setDeviceData() - '${url}' ${JSON.stringify(value)} > ${err}`);
        this.#handelHttpError(err);
        throw Error('Set device data failed');
      });
  }

  #handelHttpError(err) {
    if (err.response) {
      if (err.response.status === 404) {
        this.setUnavailable(this.homey.__('device.error', { msg: `Path not found '${err.request.path}'` }));
      } else {
        this.setUnavailable(this.homey.__('device.error', { msg: err }));
      }
    } else if (err.request) {
      if (err.code === 'EHOSTUNREACH' || err.code === 'ENETUNREACH') {
        this.setUnavailable(this.homey.__('device.offline'));
      } else {
        this.setUnavailable(this.homey.__('device.error', { msg: err.code }));
      }
    }
  }

};
